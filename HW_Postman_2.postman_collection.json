{
	"info": {
		"_postman_id": "0480da01-eb07-4e85-b481-4e4632639634",
		"name": "HW_Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"string is correct\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json(); \r",
							"// Спарсить request\r",
							"let post_form_data = request.data;\r",
							"let family = jsonData.family;\r",
							"let post_form_data_salary = +post_form_data.salary;\r",
							"let age = parseInt(jsonData.age);\r",
							"\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(\"family child\", jsonData.family.children[0]);\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary 1000\", function () {  \r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name Lina\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Lina\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age 35\", function () {\r",
							"    pm.expect(age).to.eql(35);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name = name s request\", function () {\r",
							"     pm.expect(jsonData.name).to.eql (post_form_data.name);\r",
							"    \r",
							"});\r",
							"console.log(typeof(post_form_data.name));\r",
							"console.log(\"post_form_data.name =\", post_form_data.name);\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age = age s request\", function () { \r",
							"     pm.expect(jsonData.age).to.eql (post_form_data.age);\r",
							"});\r",
							"console.log(typeof(post_form_data.age));\r",
							"console.log(\"post_form_data.age =\", post_form_data.age );\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary = salary s request\", function () { \r",
							"     pm.expect(jsonData.salary).to.eql ( post_form_data_salary);\r",
							"});\r",
							"console.log(typeof(post_form_data.salary));\r",
							"console.log(\"post_form_data.salary =\", post_form_data.salary );\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function () { \r",
							"     pm.expect(jsonData.family.u_salary_1_5_year).to.eql (post_form_data_salary * 4);\r",
							"});\r",
							"console.log(\"u_salary_1_5_year\", jsonData.family.u_salary_1_5_year);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json(); \r",
							"console.log(jsonData);\r",
							"\r",
							"// Спарсить request\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData);\r",
							"\r",
							"let dog = jsonData.family.pets.dog;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(jsonData.name).to.equal(reqData.name);\r",
							"});\r",
							"console.log(\"request_name - \", reqData.name);\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(jsonData.age).to.equal(reqData.age);\r",
							"});\r",
							"console.log(\"request_age - \", reqData.age);\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check salary\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.salary).to.equal(+reqData.salary);\r",
							"});\r",
							"console.log(\"request_salary - \", reqData.salary);\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"let family = jsonData.family;\r",
							"console.log(\"family - \", family.children[1]);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"dog has name\", function () {\r",
							"    pm.expect(dog).to.have.property(\"name\");\r",
							"});\r",
							" \r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"dog has age\", function () {\r",
							"    pm.expect(dog).to.include.keys(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"dog name Luky is true\", function () {\r",
							"    pm.expect(dog.name).to.equal(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"dog age 4 years is true\", function () {\r",
							"    pm.expect(dog.age).to.equal(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?salary=1000&age=35&name=Lina",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "name",
							"value": "Lina"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json\r",
							"var jsonData = pm.response.json(); \r",
							"\r",
							"//Спарсить request\r",
							"let qet_params = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(jsonData.name).to.equal(qet_params.name);\r",
							"});\r",
							"console.log(\"resp_name - \", jsonData.name);\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(jsonData.age).to.equal(+qet_params.age);\r",
							"});\r",
							"console.log(typeof(qet_params.age));\r",
							"console.log(\"resp_age - \", jsonData.age);\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log(\"Resp_Salary \", jsonData.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log(typeof(qet_params.salary));\r",
							"console.log(\"Req_Salary \", qet_params.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary параметр salary из response\r",
							"console.log(typeof(jsonData.salary[0]));\r",
							"console.log(\"Resp_Salary 0\", jsonData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(typeof(jsonData.salary[1]));\r",
							"console.log(\"Resp_Salary 1\", jsonData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(typeof(jsonData.salary[2]));\r",
							"console.log(\"Resp_Salary 2\", jsonData.salary[2]);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0 element salary = 1000 \", function () { \r",
							"     pm.expect(jsonData.salary[0]).to.eql (+qet_params.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"1 salary = 2000 \", function () { \r",
							"     pm.expect(+jsonData.salary[1]).to.eql (qet_params.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"1 salary = 3000 \", function () { \r",
							"     pm.expect(+jsonData.salary[2]).to.eql (qet_params.salary*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"// Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let count = 1;\r",
							"for (let i of jsonData.salary) {\r",
							"    console.log(count, \"salary\", i)\r",
							"  count ++  \r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?age=35&name=Lina&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "name",
							"value": "Lina"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var respData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let post_form_data = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response has start_qa_salary\", function() {\r",
							"pm.expect(respData).to.include.key(\"start_qa_salary\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response has qa_salary_after_6_months\", function() {\r",
							"    pm.expect(respData).to.include.keys(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response has qa_salary_after_12_months\", function() {\r",
							"    pm.expect(respData).to.include.keys(\"qa_salary_after_12_months\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response has qa_salary_after_1.5_year\", function() {\r",
							"pm.expect(respData).to.include.keys(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response has qa_salary_after_3.5_years\", function() {\r",
							"pm.expect(respData).to.include.keys(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"response has person\", function() {\r",
							"pm.expect(respData).to.include.keys(\"person\")\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months = reqSalary*2\", function() {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(post_form_data.salary*2)\r",
							"});\r",
							"console.log(respData.qa_salary_after_6_months)\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = reqSalary*2.7\", function() {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(post_form_data.salary*2.7)\r",
							"});\r",
							"console.log(respData.qa_salary_after_12_months)\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = reqSalary*3.3\", function() {\r",
							"    pm.expect (respData[\"qa_salary_after_1.5_year\"]).to.eql(post_form_data.salary*3.3);\r",
							"});\r",
							"console.log(typeof(respData[\"qa_salary_after_1.5_year\"]));\r",
							"console.log(\"qa_salary_after_1.5_year = \", respData[\"qa_salary_after_1.5_year\"])\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_year = reqSalary*3.8\", function() {\r",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql (post_form_data.salary*3.8)\r",
							"});\r",
							"console.log(typeof(respData[\"qa_salary_after_3.5_years\"]));\r",
							"console.log(\"qa_salary_after_3.5_year = \", respData[\"qa_salary_after_3.5_years\"])\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"u_name_1 = reqSalary\", function() {\r",
							"    pm.expect(respData.person.u_name[1]).to.eql (+post_form_data.salary)\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age = reqage\", function() {\r",
							"    pm.expect(respData.person.u_age).to.eql(+post_form_data.age)\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years = reqsalary*4.2\", function() {\r",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(post_form_data.salary*4.2)\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"\r",
							"//Variant 1\r",
							"// for (i in respData.person){\r",
							"//     if(typeof(respData.person[i]) == 'object'){\r",
							"//         for (y in respData.person[i]){\r",
							"//        console.log(\"Data -\" +respData.person[i][y], typeof(respData.person[i][y]));\r",
							"//     }}\r",
							"//     else{\r",
							"//          console.log(\"Key =\" + i, typeof(i));\r",
							"//     }};\r",
							"\r",
							"//Variant 2\r",
							"     for (var i in respData.person) {\r",
							"       console.log(typeof(respData.person[i]))\r",
							"   console.log(i + \" = \" + respData.person[i]);\r",
							" };\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}